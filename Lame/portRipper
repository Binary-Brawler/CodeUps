#!/usr/bin/env python3

# Lame CodeUp - portRipper - Simple Port Scanner w/ service minimal service detection
# ---------------------------------------------------------------
# Author    : Chaotic_Guru                                       |
# Github    : https://github.com/ChaoticHackingNetwork           |
# Discord   : https://discord.gg/nv445EX (ChaoticHackingNetwork) | 						 |					 
# ---------------------------------------------------------------

import sys
import socket
import time
import threading
from smb.SMBConnection import SMBConnection
from nmb.NetBIOS import NetBIOS

netbios = NetBIOS()

# Gather target and set port
# works for both 139/445
target = sys.argv[1]
s_port = int(sys.argv[2])
e_port = int(sys.argv[3])
threads = []


def bannerGrabber(port):
    # Check for SMB on port 139 and 445
    if port in [139, 445]:
        smb_detected = smbCheck(port)
        if smb_detected:
            print(f"[*] Port: {port:<4} is open\n    - SMB Detected!")
        else:
            print(f"[*] Port: {port:<4} is open\n    - Banner not available (timeout)")
        return

    # Create socket object, set timeout and connect
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(2)
    conn = sock.connect_ex((target, port))

    if conn == 0:
        # If the port is open, grab the banner
        try:
            # Receive up to 1024 bytes of data from the socket
            banner = sock.recv(1024).decode().strip()
            print(f"[*] Port: {port:<4} is open\n    - Banner: {banner}")
        except socket.timeout:
            print(f"[*] Port: {port:<4} is open\n    - Banner not available (timeout)")
        except Exception as e:
            print(f"[*] Port: {port:<4} is open\n    - Error while grabbing banner: {e}")
        finally:
            sock.close()
    else:
        # If the port is closed, skip banner grabbing
        sock.close()


def smbCheck(port):
    try:
        # Specifiy username, passwd, client_name and server_name
        conn = SMBConnection("", "", "", "")  # Using anonymous login
        conn.connect(target, port)
        if bool(conn) == True:
            return True
        conn.close()
    except TimeoutError as e:
        return False
    except:
        return False


def portScannerThreaded():
    # Record the start time of the scan
    start_time = time.time()

    # Loop between start and end ports
    for port in range(s_port, e_port):
        # Create a thread for each port and start it
        thread = threading.Thread(target=bannerGrabber, args=(port,))
        thread.start()
        threads.append(thread)

    # Wait for all threads to finish
    for thread in threads:
        thread.join()

    # Record the end time of the scan
    end_time = time.time()
    # Calculate the time elapsed and display it
    elapsed_time = end_time - start_time
    print(f"\nScan completed in {elapsed_time:.2f} seconds.")


# Don't worry, we will touch on this...
if __name__ == '__main__':

    if len(sys.argv) != 4:
        print("Usage: python portScanner <target> <Starting Port> <Ending Port>")
        sys.exit(1)

    portScannerThreaded()
